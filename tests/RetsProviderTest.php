<?php


use Faker\Factory;
use FeedFaker\Providers\RetsProvider;


class RetsProviderTest extends PHPUnit_Framework_TestCase
{
    public $faker;

    public function setUp()
    {
        $this->faker = Factory::create();
        $this->faker->addProvider(new RetsProvider($this->faker));
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testModifiersWork()
    {
        // test unique()
        $values = array();
        for ($i=0; $i < 5; $i++) {
            $values []= $this->faker->unique()->changeType;
        }
        // should have all five change types
        $this->assertTrue(count($values) == count(array_unique($values)));

        // test optional()
        $value = $this->faker->optional(0)->officeType;
        $this->assertNull($value);
    }

    public function testDescription()
    {
        $description = $this->faker->description;
        $this->assertSame(4, count(explode('. ', $description)));
    }

    public function testPrivateDescription()
    {
        $description = $this->faker->private_description;
        $this->assertSame(4, count(explode('. ', $description)));
    }

    public function testBathrooms()
    {
        $bathrooms = $this->faker->bathrooms();
        // we should always have a BathroomsTotalInteger value
        $this->assertNotEmpty($bathrooms['total']);

        $total = $bathrooms['total'];
        $full = $bathrooms['full'];
        $three_quarter = $bathrooms['three-quarter'];
        $half = $bathrooms['half'];
        $one_quarter = $bathrooms['one-quarter'];
        $partial = $bathrooms['partial'];

        $this->assertSame($full+$three_quarter+$half+$one_quarter+$partial, $total);

        if ($partial) {
            // if we have partial set, we shouldn't have the quarter/half set
            $this->assertEmpty($three_quarter);
            $this->assertEmpty($half);
            $this->assertEmpty($one_quarter);
        }
    }
}
